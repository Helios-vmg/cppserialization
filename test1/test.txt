cpp test1{
	namespace test1_types{
		class A{
		public:
			u8                  x0;
			u16                 x1;
			u32                 x2;
			u64                 x3;
			i8                  x4;
			i16                 x5;
			i32                 x6;
			i64                 x7;
			float               x8;
			double              x9;
			string              x10;
			u32string           x11;
			optional<u8>        x12;
			optional<u16>       x13;
			optional<u32>       x14;
			optional<u64>       x15;
			optional<i8>        x16;
			optional<i16>       x17;
			optional<i32>       x18;
			optional<i64>       x19;
			optional<float>     x20;
			optional<double>    x21;
			optional<string>    x22;
			optional<u32string> x23;

			verbatim{
			public:
				A() = default;
				bool operator==(const A &) const;
				bool operator!=(const A &other) const{
					return !(*this == other);
				}
			}verbatim
		}
	}
}
cpp test2{
	namespace test2_types{
		class Root{
		public:
			vector<unique_ptr<Node>> nodes;
			pointer<Node> root;
			verbatim{
			public:
				Root() = default;
			}verbatim
		}
		class Node{
		public:
			vector<pointer<Node>> links;
			u32 data;
			verbatim{
			public:
				Node() = default;
			}verbatim
		}
	}
}
cpp test3{
	namespace test3_types{
		abstract class A{
		public:
			verbatim{
			public:
				A() = default;
				virtual int foo() const = 0;
			}verbatim
		}
		class B : A{
		public:
			verbatim{
			public:
				B() = default;
				int foo() const override;
			}verbatim
		}
		class C : A{
		public:
			verbatim{
			public:
				C() = default;
				int foo() const override;
			}verbatim
		}
		class D{
		public:
			vector<unique_ptr<A>> objects;
			verbatim{
			public:
				D() = default;
				int sum() const;
			}verbatim
		}
	}
}
cpp test4{
	class inheritance_graph{
	public:
		vector<shared_ptr<A>> nodesA;
		vector<shared_ptr<B>> nodesB;
		verbatim{
			inheritance_graph() = default;
		}verbatim
	}
	class A{
	public:
		string data_a;
		verbatim{
			A() = default;
		}verbatim
	}
	class B{
	public:
		vector<string> data_b;
		verbatim{
			B() = default;
		}verbatim
	}
	class C : A, B{
		double data_c;
		verbatim{
		public:
			C() = default;
			void set_data_c(double c){
				this->data_c = c;
			}
		}verbatim
	}
}
decl test5_types{
	namespace requests{

	abstract class Request{
		verbatim{
		public:
			Request() = default;
		}verbatim
		$Request_decl
	}

	class GetFile : Request{
	public:
		string name;
		verbatim{
			GetFile() = default;
		}verbatim
		$RequestDerived_decl
	}

	class GetFileSize : Request{
	public:
		string name;
		verbatim{
			GetFileSize() = default;
		}verbatim
		$RequestDerived_decl
	}

	}

	/**************************************************************/

	namespace responses{

	abstract class Response{
	public:
		optional<string> error;
		verbatim{
		public:
			Response() = default;
		}verbatim
		$Response_decl
	}

	class Void : Response{
	public:
		verbatim{
		public:
			Void() = default;
		}verbatim
		$ResponseDerived_decl
	}

	class FileContents : Response{
	public:
		vector<u8> contents;
		verbatim{
		public:
			FileContents() = default;
		}verbatim
		$ResponseDerived_decl
	}

	class FileSize : Response{
	public:
		u64 file_size;
		verbatim{
		public:
			FileSize() = default;
		}verbatim
		$ResponseDerived_decl
	}

	}
}
cpp test5_client{
	local_include "test5_decls.h"
    Request_decl = verbatim{}verbatim
    RequestDerived_decl = verbatim{}verbatim
    Response_decl = verbatim{
		public:
			virtual std::string to_string() const = 0;
	}verbatim
    ResponseDerived_decl = verbatim{
		public:
			std::string to_string() const override;
	}verbatim
    namespace client{
        include_decl test5_types
    }
}
cpp test5_server{
	local_include "test5_decls.h"
    Request_decl = verbatim{
		public:
			virtual std::unique_ptr<responses::Response> handle(RequestHandler &) const = 0;
	}verbatim
    RequestDerived_decl = verbatim{
		public:
			std::unique_ptr<responses::Response> handle(RequestHandler &) const override;
	}verbatim
    Response_decl = verbatim{}verbatim
    ResponseDerived_decl = verbatim{}verbatim
    namespace server{
        include_decl test5_types
    }
}
cpp test6{
	enum ObjectType : u32{
		Null = 0,
		Int = 1,
		Double = 2,
		String = 3,
	}
	class Object{
	public:
		ObjectType type;
		verbatim{
			Object() = default;
		}verbatim
	}
}
